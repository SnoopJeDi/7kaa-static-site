import fs from 'fs';
import path from 'path'
import frontMatter from 'front-matter';
import marked from 'marked';

const BASE_FOLDER = "./src/content";

const renderer = new marked.Renderer();

renderer.heading = function (text, level) {
    var escapedText = text.toLowerCase().replace(/[^\w]+/g, '-');

    return '<h' + level + '><a name="' +
                  escapedText +
                   '" href="#' +
                   escapedText +
                   '">#</a> ' +
                    text + '</h' + level + '>';
  };

/**
 * Try to get every file and his content, the files probably will be readed alphabetically
 * and the files should be markdown with header, the body will be parsed as html from markdown
 * @param {string} componentName 
 * @returns {Array<*>} List of the found objects
 */
export const getContentFromFolder = (componentName) =>
{
    const folderName = path.resolve(BASE_FOLDER, componentName)
	return fs.readdirSync(folderName)
		.sort(getNumberPart)
        .filter( fileName => !fs.lstatSync(path.resolve(folderName, fileName)).isDirectory())
		.map(fileName => {

		const content = fs.readFileSync(path.resolve(folderName, fileName), "utf-8");
		const { attributes, body } = frontMatter(content);
		return {
			...attributes, html: getHtmlPart(body)
		}
    });
}

const getHtmlPart = (markdownText) => {
    const renderedText = marked(markdownText)
    return renderedText.replace(/^\t{3}/gm, '');
}

//TODO: Export fn to allow generic usage
const getNumberPart = (a,b) => {
    if(a === undefined)
        return 1;
    if(b === undefined)
        return -1;
	const aNum = Number(a.split("-")[0])
	const bNum = Number(b.split("-")[0])
	return aNum < bNum ? -1 : 1
}